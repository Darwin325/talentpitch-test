<?php

namespace App\Exceptions;

use Throwable;
use App\Traits\ApiResponser;
use Illuminate\Database\QueryException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Validation\ValidationException;
use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Illuminate\Database\Eloquent\RelationNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;

class Handler extends ExceptionHandler
{
    use ApiResponser;

    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }


    public function render($request, Throwable $exception)
    {
        //return parent::render($request, $e); // TODO: Change the autogenerated stub
        if ($request->is('api/*')) {
            if ($exception instanceof ValidationException) {
                return $this->convertValidationExceptionToResponse($exception, $request);
            }

            if ($exception instanceof ModelNotFoundException) {
                $modelo = strtolower(class_basename($exception->getModel()));
                return $this->errorResponse("No instance of {$modelo} with the specified id exists", 404);
            }

            if ($exception instanceof AuthenticationException) {
                return $this->unauthenticated($request, $exception);
            }

            if ($exception instanceof AuthorizationException) {
                return $this->errorResponse(__('You do not have permission to perform this action'), 403);
            }

            if ($exception instanceof NotFoundHttpException) {
                return $this->errorResponse('The specified URL was not found', 404);
            }

            if ($exception instanceof MethodNotAllowedHttpException) {
                return $this->errorResponse('The method specified in the request is not valid', 405);
            }

            if ($exception instanceof HttpException) {
                return $this->errorResponse($exception->getMessage(), $exception->getStatusCode());
            }

            if ($exception instanceof QueryException) {
                $code = $exception->errorInfo[1];
                if ($code == 1451) {
                    return $this->errorResponse('The resource cannot be permanently deleted because it is related to another.', 409);
                } else {
                    return $this->errorResponse($exception->getMessage(), 409);
                }
            }

            if ($exception->getCode() === 401) {
                return $this->errorResponse($exception->getMessage(), 401);
            }

            if (config('app.debug')) {
//                return parent::render($request, $exception);
                $message = [
                    "error" => $exception->getMessage(),
                    "line" => $exception->getLine(),
                    "file" => $exception->getFile(),
                    "code" => $exception->getCode(),
                ];
                return $this->errorResponse($message, 500);
            }

            return $this->errorResponse(__('Unexpected failure. Try again later'), 500);
        }
    }

    /**
     * Create a response object from the given validation exception.
     *
     * @param \Illuminate\Validation\ValidationException $e
     * @param \Illuminate\Http\Request $request
     * @return \Symfony\Component\HttpFoundation\Response
     */
    protected function convertValidationExceptionToResponse(ValidationException $e, $request)
    {
        $errors = $e->validator->errors()->getMessages();
        return $this->errorResponse($errors, 422);
    }
}
